package semana8;
public class HeapSorting {

    // Método principal para ordenar o array usando o algoritmo de Heapsort
    public static void sort(Comparable[] a) {
        int N = a.length;
        
        // Constrói o heap inicial
        heapify(a, N);

        // Ordena o array removendo repetidamente o maior elemento
        sortdown(a, N);
    }

    // Cria um max-heap com os N itens no array a
    public static void heapify(Comparable[] a, int N) {
        // Percorre os nós internos do heap começando pelo último nó com filhos
        for (int k = parent(N - 1); k >= 0; k--) {
            sink(a, k, N);
        }
    }

    // Remove repetidamente o maior item do array
    public static void sortdown(Comparable[] a, int N) {
        while (N > 1) {
            // Troca o maior item com o último item no heap
            exchange(a, 0, --N);
            // Restaura a propriedade de heap
            sink(a, 0, N);
        }
    }

    // Faz o nó k "afundar" no heap
    public static void sink(Comparable[] a, int k, int N) {
        while (left(k) < N) {
            int j = left(k);
            // Encontra o maior filho
            if (j < N - 1 && less(a, j, j + 1)) j++;
            // Se o pai é maior ou igual ao maior filho, o heap está ordenado
            if (!less(a, k, j)) break;
            // Troca o pai com o maior filho
            exchange(a, k, j);
            // Move para baixo na árvore
            k = j;
        }
    }

    // Funções auxiliares para cálculo de índices
    public static int parent(int k) {
        return (k - 1) / 2;
    }

    public static int left(int k) {
        return 2 * k + 1;
    }

    public static int right(int k) {
        return 2 * k + 2;
    }

    // Funções auxiliares para comparação e troca de elementos
    private static boolean less(Comparable[] a, int i, int j) {
        return a[i].compareTo(a[j]) < 0;
    }

    private static void exchange(Comparable[] a, int i, int j) {
        Comparable temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}
